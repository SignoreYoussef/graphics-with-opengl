#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexColor;
layout(location = 2) in vec2 vertexTexCoord;
layout(location = 3) in vec3 vertexNormal_modelspace;

// Values that stay constant for the whole model.
uniform mat4 ViewProjectionMatrix;
uniform mat4 ModelMatrix;

// Output data from vertex shader to fragment shader.
out vec3 fragmentColor;
out vec2 TexCoord	;

out vec3 normal_worldspace;
out vec3 position_worldspace;
void main(){
	gl_Position = ViewProjectionMatrix * ModelMatrix * vec4(vertexPosition_modelspace, 1);
	 position_worldspace = vec3(ModelMatrix*vec4(vertexPosition_modelspace,1));
	 normal_worldspace = normalize(vec3(ModelMatrix * vec4(vertexNormal_modelspace,0)));
	fragmentColor = vertexColor;
	TexCoord=vertexTexCoord;
}