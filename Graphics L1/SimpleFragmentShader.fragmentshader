#version 330 core

// Input data from vertex shader.
in vec3 fragmentColor;
in vec2 TexCoord;

in vec3 position_worldspace;
in vec3 normal_worldspace;


// Ouput data

out vec3 color;

uniform sampler2D myTextureSampler;
uniform int RenderingMode;
uniform vec3 LightPosition_worldspace;
uniform vec3 EyePosition_worldspace;
uniform vec3 ambientLight;

void main()
{


	// Diffuse light calculations.
	vec3 lightVector = normalize(LightPosition_worldspace - position_worldspace);

	float brightness = dot(lightVector,normal_worldspace);

	vec3 diffuseLight = vec3(brightness,brightness,brightness);

	diffuseLight = clamp(diffuseLight,0,1);

	//Specular light calculations.
	vec3 reflectedLightVector = reflect(-lightVector,normal_worldspace);

	vec3 eyeDirectionVector = normalize(EyePosition_worldspace - position_worldspace);

	float specularity = dot(reflectedLightVector,eyeDirectionVector);

	float specularExponent = 100;
	specularity = pow(specularity,specularExponent);

	vec3 specularLight = vec3(specularity,specularity,specularity);
	specularLight = clamp(specularLight,0,1);

	vec3 lightingColor = ambientLight + diffuseLight + specularLight;
if(RenderingMode==0)
	color =mix( fragmentColor,lightingColor,0.5);

	if(RenderingMode==1)
	color=mix((texture(myTextureSampler,TexCoord).rgb),lightingColor,0.5);

	if(RenderingMode==2)
	color=mix((texture(myTextureSampler,TexCoord).rgb+fragmentColor),lightingColor,0.5);
}